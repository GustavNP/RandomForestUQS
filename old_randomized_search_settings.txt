






# === BROAD 1 ===
# n_estimators = [int(i) for i in np.linspace(start = 200, stop = 2000, num = 10)]
# max_depth = [int(i) for i in np.linspace(10, 100, num = 10)]
# max_depth.append(None)
# max_features = ["sqrt"]
# min_samples_leaf = [1, 2, 4]
# min_samples_split = [2, 5, 10, 20]
# bootstrap = [True, False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}




# === BROAD 2 ===
# n_estimators = [200, 400, 600, 800, 1000]
# max_depth = [20, 30, 40, 50] # After BROAD 2 results: Low values are not good.
# max_features = ["sqrt"]
# min_samples_leaf = [1, 2, 4, 8, 15, 25] # After BROAD 2 results: High values are not good.
# min_samples_split = [2, 5, 10, 20, 40] # After BROAD 2 results: High values are not good
# bootstrap = [True, False] # After BROAD 2 results: seems to perform better without bootstrapping

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}





# === BROAD 3 ===
# n_estimators = [150, 250, 500, 1000] # After BROAD 3 results: Larger does seem to perform better, but is not as important as the other parameters.
# max_depth = [30, 40, 50] # After BROAD 3 results: Deeper performs better
# max_features = ["sqrt"]
# min_samples_leaf = [1, 2, 4, 8] # After BROAD 3 results: 2 is definitely better than 1 and 2 seems to be the best performing no matter the n_estimators.
# min_samples_split = [2, 5, 10, 20] # After BROAD 3 results: 5 seems to be best performing, 10 also really good. I think 2 is also good but the model becomes too large.
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}






# === BROAD 4 ===
# After results: Not much to say tbh because so many of the fits failed due to lack of memory.
# n_estimators = [150, 250, 500, 1000] 
# max_depth = [40, 50]
# max_features = ["sqrt"]
# min_samples_leaf = [2, 3, 4]
# min_samples_split = [2, 5, 10]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}



# === SPECIFIC 1 ===
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [3]
# min_samples_split = [5]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}



# # === SPECIFIC 2 ===
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [2]
# min_samples_split = [5]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}





# === SPECIFIC 3 ===
# # Results: worse than SPECIFIC 2
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [2]
# min_samples_split = [3]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}



# === SPECIFIC 4 ===
# # Result: Worse than SPECIFIC 2
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [2]
# min_samples_split = [6]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}






# === SPECIFIC 5 ===
# Results: Best performing so far (better than SPECIFIC 2)
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}






# # === SPECIFIC 6 ===
# # Results: worse than SPECIFIC 5
# n_estimators = [1000] 
# max_depth = [50]
# max_features = ["sqrt"]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [True]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}






# === SPECIFIC 7 ===
# Results: Performed horribly. Also, takes a lot of time to train (52 minutes) because we consider all features.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [1.0]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}



# === SPECIFIC 8 ===
# # Results: Best so far.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [7]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}




# # === SPECIFIC 9 ===
# # Results: Best so far. Better than SPECIFIC 8.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [6]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}






# === SPECIFIC 10 ===
# # Results: Worse.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [4]
# min_samples_leaf = [2]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}




# === SPECIFIC 11 ===
# # Results: Worse.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [6]
# min_samples_leaf = [3]
# min_samples_split = [6]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}




# # === SPECIFIC 12 ===
# # Results: Quite good, but worse than 9.
# n_estimators = [1000] 
# max_depth = [50]
# max_features = [6]
# min_samples_leaf = [1]
# min_samples_split = [4]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}


# # === SPECIFIC 13 ===
# # Results: Failed due to lack of memory at 1000 estimators. Also failed two of the fits at 800, but the one score was quite low. 
# n_estimators = [800] 
# max_depth = [50]
# max_features = [6]
# min_samples_leaf = [1]
# min_samples_split = [2]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}








# # === SPECIFIC 14 ===
# # Results:
# n_estimators = [200] 
# max_depth = [30]
# max_features = [6]
# min_samples_leaf = [4]
# min_samples_split = [8]
# bootstrap = [True]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}



# # === SPECIFIC 15 ===
# # Results:
# n_estimators = [100] 
# max_depth = [10]
# max_features = [10]
# min_samples_leaf = [8]
# min_samples_split = [16]
# bootstrap = [False]

# randomized_search_grid = {'n_estimators': n_estimators,
#                'max_depth': max_depth,
#                'max_features': max_features,
#                'min_samples_leaf': min_samples_leaf,
#                'min_samples_split': min_samples_split,
#                'bootstrap': bootstrap}

